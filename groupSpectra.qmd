---
title: "groupSpectra"
format: html
editor: visual
---

## A notebook for analyzing spectral data simply and efficiently.

### How to use me

This is an interactive notebook where blocks of code run analyses but are adjustable. To make the analysis streamlined, much of these code blocks rely on functions that are loaded in the "Setting Up" section from a separate R script: **spectraFunctions.R**. You can refer to this script to understand the inner workings of the code but is suggested to not change anything there. Instead, look for places in this notebook where code is flexible, such as in the block of code below where flexible parameters are denoted with the comment "flex". Try running this code block by clicking the green triangle in the top right-hand corner:

```{r}
a <- 'There are'                          #FLEX
b <- 0                                    #FLEX
c <- 'grapes in antarctica'               #FLEX
print(paste(a, b, c, sep=' '))
```

If a line doesn't say **"FLEX"** next to it, don't change it unless you're sure you know what you're doing!

## Setting up

### Load helper functions

This code block below loads in custom functions required for the spectral analysis.

```{r}
library(DT) 
library(ggplot2)
library(RColorBrewer)

source('spectraFunctions.R')
```

### Read in raw spectral data

Spectral data should be saved in .CSV format with the file name **spectra.csv** in your QMD folder. To be loaded correctly, columns should be organised in the following format:

-   The first column is named **id** and contains a range of whole numbers from 1 to K, where K is the total number of rows in the table.

-   Spectrum values are contained in columns named **1** to **L**, where **L** is the number of total spectrum values for each example.

-   Any number of columns can be added between **id** and **1** providing additional information (species, site, or any other metadata)

Run this code block below to see an example of correctly formatted spectral data.

```{r}
showExampleTable()
```

Run the code below to read in your **spectra.csv** data and check that it is in the correct format.

```{r}
tData <- read.csv('formattedData/spectra.csv', fill=TRUE)
info <- checkData(tData)
tData <- info[[1]]

```

## Spectral analysis

### OPTIONAL - Compress data to improve efficiency

If your data contains many samples, you may consider reudcing the size of your dataset to improve the efficiency of this analysis. Use the code below to downsample or compress your data. Downsampling involves sub-sampling your data randomly to reduce the number of samples to a fraction of the original dataset defined by **downsample_factor**, while compressing involves reducing the length of your spectra by taking a moving average of each, where **compress_factor** determines the number of values averaged in each non-overlapping step.

```{r}
downsample_factor <- 1
compress_factor <- 1
vars <- c('species', 'enc_id')

tData <- downsampleData(tData, fraction=downsample_factor, variables=vars) %>% compressData(k=compress_factor)
```

### 1) Visualize raw spectra

Use the code below to visualize your spectra by variable groupings of your choosing:

```{r}
subsetVar <- c('species')
subsetVarLevel <- 1
selectVars <- c('temperature', 'source')                          #FLEX


overlaySpectra(data=tData, variables=selectVars, subsetVar=subsetVar, subsetVarLevel=subsetVarLevel, xScale=c(5,55), xLims=c(5,30), XYlabs = c('Retention time (min)', 'Relative abundance'))

```

### 2) Compare pair of two spectra

Once you've correctly uploaded your data, we can now begin to analyse spectra. To start, enter two row numbers **n1** and **n2** into the code below to compare two individual spectra:

```{r}
n1 <- sample(1:nrow(tData), 1)                                   #FLEX
n2 <- sample(1:nrow(tData), 1)                                 #FLEX
label_var <- 'species'                       #FLEX

scores <- spectralDist(data=tData, n1=n1, n2=n2, labelVar=label_var, plotSpectra=TRUE, verbose=FALSE)


```

The **scores** dataframe produced by the function **spectralDist()** gives you a table of spectral distances between two spectra using different **k** values, representing different spectral resolutions (i.e. width of spectral windows to compare):

```{r}
print(scores)
```

Use the **mean difference** across all scores as a universal spectral distance metric:

```{r}
print(mean(scores$difference))
```

### 2) Compute distance matrix across all spectra

Using this distance metric, we can compute spectral distances between all pairs of spectra in the dataframe **tSpec**.The code block below computes this and uses **multi-dimensional scaling (MDS)** to map all spectral profiles in two-dimensions while preserving pairwise distances.

**NOTE**: The amount of time required to compute the distance matrix increases exponentially with the number of spectra. If you have a large number of spectra, you may want to consider dividing your dataset into different sub-datasets before computing any distance matrices.

```{r}
DM <- getDistMat(tData)

mds_result <- cmdscale(DM, k = 2)
mds_coords <- as.data.frame(mds_result)
colnames(mds_coords) <- c("MDS1", "MDS2")
VARIABLES <- info$vars
for (var in VARIABLES) {
  mds_coords[[var]] <- as.factor(tData[[var]])
}
```

We can visualize the information in the distance matrix using the MDS coordinates:

```{r}
selectVars <- c('temperature','source', 'species')     #FLEX (max 3 variables)
point_size <- 2                                         #FLEX
transparency <- 0.7                                     #FLEX


plotSpectralGroups(mds_coords, variables=selectVars, s=point_size, a=transparency)

```

### 3) Compare groups of data using permutation testing

In addition to visualizing spectral groups via MDS, you can also compare specific groups of spectra statistically using permutation tests. Select variables for grouping and run the code below to identify distinct groups in your data.

```{r}
groups <- getGroups(mds_coords, selectVars)
```

The code below conducts a permutation test, where distances between randomly selected pairs of spectra across the selected groups are compared with distances between randomly selected pairs of spectra regardless of group. The p-value shown can be interpreted as an estimate for the likelihood that the distances between spectra of the different selected groups are not larger than the distances between random pairs of spectra.

```{r}
n1 <- 8                   #FLEX
n2 <- 17                  #FLEX

alpha = 0.05              #FLEX


results <- permTestGroups(data=mds_coords, n1=n1, n2=n2, selectVars=selectVars, a=alpha, nTests=1000)
```
